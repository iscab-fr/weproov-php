<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeProov Api
 *
 * WeProov public API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: support@weproov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item extends ItemShort 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'infos' => '\Swagger\Client\Model\ItemInfo',
'supports' => '\Swagger\Client\Model\ItemSupport',
'checklists' => '\Swagger\Client\Model\ItemChecklist',
'photoscan' => '\Swagger\Client\Model\ItemPhotoScan'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'infos' => null,
'supports' => null,
'checklists' => null,
'photoscan' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'infos' => 'infos',
'supports' => 'supports',
'checklists' => 'checklists',
'photoscan' => 'photoscan'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'infos' => 'setInfos',
'supports' => 'setSupports',
'checklists' => 'setChecklists',
'photoscan' => 'setPhotoscan'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'infos' => 'getInfos',
'supports' => 'getSupports',
'checklists' => 'getChecklists',
'photoscan' => 'getPhotoscan'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['infos'] = isset($data['infos']) ? $data['infos'] : null;
        $this->container['supports'] = isset($data['supports']) ? $data['supports'] : null;
        $this->container['checklists'] = isset($data['checklists']) ? $data['checklists'] : null;
        $this->container['photoscan'] = isset($data['photoscan']) ? $data['photoscan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets infos
     *
     * @return \Swagger\Client\Model\ItemInfo
     */
    public function getInfos()
    {
        return $this->container['infos'];
    }

    /**
     * Sets infos
     *
     * @param \Swagger\Client\Model\ItemInfo $infos infos
     *
     * @return $this
     */
    public function setInfos($infos)
    {
        $this->container['infos'] = $infos;

        return $this;
    }

    /**
     * Gets supports
     *
     * @return \Swagger\Client\Model\ItemSupport
     */
    public function getSupports()
    {
        return $this->container['supports'];
    }

    /**
     * Sets supports
     *
     * @param \Swagger\Client\Model\ItemSupport $supports supports
     *
     * @return $this
     */
    public function setSupports($supports)
    {
        $this->container['supports'] = $supports;

        return $this;
    }

    /**
     * Gets checklists
     *
     * @return \Swagger\Client\Model\ItemChecklist
     */
    public function getChecklists()
    {
        return $this->container['checklists'];
    }

    /**
     * Sets checklists
     *
     * @param \Swagger\Client\Model\ItemChecklist $checklists checklists
     *
     * @return $this
     */
    public function setChecklists($checklists)
    {
        $this->container['checklists'] = $checklists;

        return $this;
    }

    /**
     * Gets photoscan
     *
     * @return \Swagger\Client\Model\ItemPhotoScan
     */
    public function getPhotoscan()
    {
        return $this->container['photoscan'];
    }

    /**
     * Sets photoscan
     *
     * @param \Swagger\Client\Model\ItemPhotoScan $photoscan photoscan
     *
     * @return $this
     */
    public function setPhotoscan($photoscan)
    {
        $this->container['photoscan'] = $photoscan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
