<?php
/**
 * ReportShort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeProov Api
 *
 * WeProov public API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: support@weproov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportShort Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportShort implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportShort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'proov_code' => 'string',
'custom_ref' => 'string',
'template_id' => 'int',
'state' => 'string',
'title' => 'string',
'description' => 'string',
'dropoff' => 'bool',
'full_dropoff' => 'bool',
'meta' => '\Swagger\Client\Model\ReportShortMeta[]',
'category_id' => 'int',
'category' => 'string',
'sub_category_id' => 'int',
'sub_category' => 'string',
'created_at' => '\DateTime',
'finished_at' => '\DateTime',
'dropoff_finished_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'proov_code' => null,
'custom_ref' => null,
'template_id' => 'int64',
'state' => null,
'title' => null,
'description' => null,
'dropoff' => null,
'full_dropoff' => null,
'meta' => null,
'category_id' => null,
'category' => null,
'sub_category_id' => null,
'sub_category' => null,
'created_at' => 'date-time',
'finished_at' => 'date-time',
'dropoff_finished_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'proov_code' => 'proov_code',
'custom_ref' => 'custom_ref',
'template_id' => 'template_id',
'state' => 'state',
'title' => 'title',
'description' => 'description',
'dropoff' => 'dropoff',
'full_dropoff' => 'full_dropoff',
'meta' => 'meta',
'category_id' => 'category_id',
'category' => 'category',
'sub_category_id' => 'sub_category_id',
'sub_category' => 'sub_category',
'created_at' => 'created_at',
'finished_at' => 'finished_at',
'dropoff_finished_at' => 'dropoff_finished_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'proov_code' => 'setProovCode',
'custom_ref' => 'setCustomRef',
'template_id' => 'setTemplateId',
'state' => 'setState',
'title' => 'setTitle',
'description' => 'setDescription',
'dropoff' => 'setDropoff',
'full_dropoff' => 'setFullDropoff',
'meta' => 'setMeta',
'category_id' => 'setCategoryId',
'category' => 'setCategory',
'sub_category_id' => 'setSubCategoryId',
'sub_category' => 'setSubCategory',
'created_at' => 'setCreatedAt',
'finished_at' => 'setFinishedAt',
'dropoff_finished_at' => 'setDropoffFinishedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'proov_code' => 'getProovCode',
'custom_ref' => 'getCustomRef',
'template_id' => 'getTemplateId',
'state' => 'getState',
'title' => 'getTitle',
'description' => 'getDescription',
'dropoff' => 'getDropoff',
'full_dropoff' => 'getFullDropoff',
'meta' => 'getMeta',
'category_id' => 'getCategoryId',
'category' => 'getCategory',
'sub_category_id' => 'getSubCategoryId',
'sub_category' => 'getSubCategory',
'created_at' => 'getCreatedAt',
'finished_at' => 'getFinishedAt',
'dropoff_finished_at' => 'getDropoffFinishedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_PENDING_FIRST = 'pending_first';
const STATE_PENDING_SECOND = 'pending_second';
const STATE_FINISHED = 'finished';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING_FIRST,
self::STATE_PENDING_SECOND,
self::STATE_FINISHED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['proov_code'] = isset($data['proov_code']) ? $data['proov_code'] : null;
        $this->container['custom_ref'] = isset($data['custom_ref']) ? $data['custom_ref'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['dropoff'] = isset($data['dropoff']) ? $data['dropoff'] : null;
        $this->container['full_dropoff'] = isset($data['full_dropoff']) ? $data['full_dropoff'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['sub_category_id'] = isset($data['sub_category_id']) ? $data['sub_category_id'] : null;
        $this->container['sub_category'] = isset($data['sub_category']) ? $data['sub_category'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['finished_at'] = isset($data['finished_at']) ? $data['finished_at'] : null;
        $this->container['dropoff_finished_at'] = isset($data['dropoff_finished_at']) ? $data['dropoff_finished_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets proov_code
     *
     * @return string
     */
    public function getProovCode()
    {
        return $this->container['proov_code'];
    }

    /**
     * Sets proov_code
     *
     * @param string $proov_code proov_code
     *
     * @return $this
     */
    public function setProovCode($proov_code)
    {
        $this->container['proov_code'] = $proov_code;

        return $this;
    }

    /**
     * Gets custom_ref
     *
     * @return string
     */
    public function getCustomRef()
    {
        return $this->container['custom_ref'];
    }

    /**
     * Sets custom_ref
     *
     * @param string $custom_ref custom_ref
     *
     * @return $this
     */
    public function setCustomRef($custom_ref)
    {
        $this->container['custom_ref'] = $custom_ref;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dropoff
     *
     * @return bool
     */
    public function getDropoff()
    {
        return $this->container['dropoff'];
    }

    /**
     * Sets dropoff
     *
     * @param bool $dropoff dropoff
     *
     * @return $this
     */
    public function setDropoff($dropoff)
    {
        $this->container['dropoff'] = $dropoff;

        return $this;
    }

    /**
     * Gets full_dropoff
     *
     * @return bool
     */
    public function getFullDropoff()
    {
        return $this->container['full_dropoff'];
    }

    /**
     * Sets full_dropoff
     *
     * @param bool $full_dropoff full_dropoff
     *
     * @return $this
     */
    public function setFullDropoff($full_dropoff)
    {
        $this->container['full_dropoff'] = $full_dropoff;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Swagger\Client\Model\ReportShortMeta[]
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Swagger\Client\Model\ReportShortMeta[] $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets sub_category_id
     *
     * @return int
     */
    public function getSubCategoryId()
    {
        return $this->container['sub_category_id'];
    }

    /**
     * Sets sub_category_id
     *
     * @param int $sub_category_id sub_category_id
     *
     * @return $this
     */
    public function setSubCategoryId($sub_category_id)
    {
        $this->container['sub_category_id'] = $sub_category_id;

        return $this;
    }

    /**
     * Gets sub_category
     *
     * @return string
     */
    public function getSubCategory()
    {
        return $this->container['sub_category'];
    }

    /**
     * Sets sub_category
     *
     * @param string $sub_category sub_category
     *
     * @return $this
     */
    public function setSubCategory($sub_category)
    {
        $this->container['sub_category'] = $sub_category;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets finished_at
     *
     * @return \DateTime
     */
    public function getFinishedAt()
    {
        return $this->container['finished_at'];
    }

    /**
     * Sets finished_at
     *
     * @param \DateTime $finished_at finished_at
     *
     * @return $this
     */
    public function setFinishedAt($finished_at)
    {
        $this->container['finished_at'] = $finished_at;

        return $this;
    }

    /**
     * Gets dropoff_finished_at
     *
     * @return \DateTime
     */
    public function getDropoffFinishedAt()
    {
        return $this->container['dropoff_finished_at'];
    }

    /**
     * Sets dropoff_finished_at
     *
     * @param \DateTime $dropoff_finished_at dropoff_finished_at
     *
     * @return $this
     */
    public function setDropoffFinishedAt($dropoff_finished_at)
    {
        $this->container['dropoff_finished_at'] = $dropoff_finished_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
