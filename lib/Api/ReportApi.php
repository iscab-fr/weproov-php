<?php
/**
 * ReportApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeProov Api
 *
 * WeProov public API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: support@weproov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ReportApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reportGet
     *
     * Allows you to retrieve the reports list
     *
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     * @param  string $find filter by id of category (optional)
     * @param  string $custom_ref filter by custom reference (optional)
     * @param  int $category_id filter by id of category (optional)
     * @param  int $sub_category_id filter by id of subcategory (optional)
     * @param  string $state filter by id of category (optional)
     * @param  int $template_id template of id used (optional)
     * @param  int $limit Max: 50 (optional)
     * @param  int $offset offset (optional)
     * @param  \DateTime $created_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $dropoff_finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ReportShort[]
     */
    public function reportGet($lang = null, $find = null, $custom_ref = null, $category_id = null, $sub_category_id = null, $state = null, $template_id = null, $limit = null, $offset = null, $created_at = null, $finished_at = null, $dropoff_finished_at = null)
    {
        list($response) = $this->reportGetWithHttpInfo($lang, $find, $custom_ref, $category_id, $sub_category_id, $state, $template_id, $limit, $offset, $created_at, $finished_at, $dropoff_finished_at);
        return $response;
    }

    /**
     * Operation reportGetWithHttpInfo
     *
     * Allows you to retrieve the reports list
     *
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     * @param  string $find filter by id of category (optional)
     * @param  string $custom_ref filter by custom reference (optional)
     * @param  int $category_id filter by id of category (optional)
     * @param  int $sub_category_id filter by id of subcategory (optional)
     * @param  string $state filter by id of category (optional)
     * @param  int $template_id template of id used (optional)
     * @param  int $limit Max: 50 (optional)
     * @param  int $offset offset (optional)
     * @param  \DateTime $created_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $dropoff_finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ReportShort[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportGetWithHttpInfo($lang = null, $find = null, $custom_ref = null, $category_id = null, $sub_category_id = null, $state = null, $template_id = null, $limit = null, $offset = null, $created_at = null, $finished_at = null, $dropoff_finished_at = null)
    {
        $returnType = '\Swagger\Client\Model\ReportShort[]';
        $request = $this->reportGetRequest($lang, $find, $custom_ref, $category_id, $sub_category_id, $state, $template_id, $limit, $offset, $created_at, $finished_at, $dropoff_finished_at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ReportShort[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportGetAsync
     *
     * Allows you to retrieve the reports list
     *
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     * @param  string $find filter by id of category (optional)
     * @param  string $custom_ref filter by custom reference (optional)
     * @param  int $category_id filter by id of category (optional)
     * @param  int $sub_category_id filter by id of subcategory (optional)
     * @param  string $state filter by id of category (optional)
     * @param  int $template_id template of id used (optional)
     * @param  int $limit Max: 50 (optional)
     * @param  int $offset offset (optional)
     * @param  \DateTime $created_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $dropoff_finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetAsync($lang = null, $find = null, $custom_ref = null, $category_id = null, $sub_category_id = null, $state = null, $template_id = null, $limit = null, $offset = null, $created_at = null, $finished_at = null, $dropoff_finished_at = null)
    {
        return $this->reportGetAsyncWithHttpInfo($lang, $find, $custom_ref, $category_id, $sub_category_id, $state, $template_id, $limit, $offset, $created_at, $finished_at, $dropoff_finished_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportGetAsyncWithHttpInfo
     *
     * Allows you to retrieve the reports list
     *
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     * @param  string $find filter by id of category (optional)
     * @param  string $custom_ref filter by custom reference (optional)
     * @param  int $category_id filter by id of category (optional)
     * @param  int $sub_category_id filter by id of subcategory (optional)
     * @param  string $state filter by id of category (optional)
     * @param  int $template_id template of id used (optional)
     * @param  int $limit Max: 50 (optional)
     * @param  int $offset offset (optional)
     * @param  \DateTime $created_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $dropoff_finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetAsyncWithHttpInfo($lang = null, $find = null, $custom_ref = null, $category_id = null, $sub_category_id = null, $state = null, $template_id = null, $limit = null, $offset = null, $created_at = null, $finished_at = null, $dropoff_finished_at = null)
    {
        $returnType = '\Swagger\Client\Model\ReportShort[]';
        $request = $this->reportGetRequest($lang, $find, $custom_ref, $category_id, $sub_category_id, $state, $template_id, $limit, $offset, $created_at, $finished_at, $dropoff_finished_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportGet'
     *
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     * @param  string $find filter by id of category (optional)
     * @param  string $custom_ref filter by custom reference (optional)
     * @param  int $category_id filter by id of category (optional)
     * @param  int $sub_category_id filter by id of subcategory (optional)
     * @param  string $state filter by id of category (optional)
     * @param  int $template_id template of id used (optional)
     * @param  int $limit Max: 50 (optional)
     * @param  int $offset offset (optional)
     * @param  \DateTime $created_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     * @param  \DateTime $dropoff_finished_at datetime range in RFC3339 separate by &#x27;,&#x27; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportGetRequest($lang = null, $find = null, $custom_ref = null, $category_id = null, $sub_category_id = null, $state = null, $template_id = null, $limit = null, $offset = null, $created_at = null, $finished_at = null, $dropoff_finished_at = null)
    {

        $resourcePath = '/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }
        // query params
        if ($find !== null) {
            $queryParams['find'] = ObjectSerializer::toQueryValue($find);
        }
        // query params
        if ($custom_ref !== null) {
            $queryParams['custom_ref'] = ObjectSerializer::toQueryValue($custom_ref);
        }
        // query params
        if ($category_id !== null) {
            $queryParams['category_id'] = ObjectSerializer::toQueryValue($category_id);
        }
        // query params
        if ($sub_category_id !== null) {
            $queryParams['sub_category_id'] = ObjectSerializer::toQueryValue($sub_category_id);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($template_id !== null) {
            $queryParams['template_id'] = ObjectSerializer::toQueryValue($template_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($created_at !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($created_at);
        }
        // query params
        if ($finished_at !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finished_at);
        }
        // query params
        if ($dropoff_finished_at !== null) {
            $queryParams['dropoff_finished_at'] = ObjectSerializer::toQueryValue($dropoff_finished_at);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportProovCodeDelete
     *
     * Allows you to delete a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function reportProovCodeDelete($proov_code, $lang = null)
    {
        list($response) = $this->reportProovCodeDeleteWithHttpInfo($proov_code, $lang);
        return $response;
    }

    /**
     * Operation reportProovCodeDeleteWithHttpInfo
     *
     * Allows you to delete a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportProovCodeDeleteWithHttpInfo($proov_code, $lang = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->reportProovCodeDeleteRequest($proov_code, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportProovCodeDeleteAsync
     *
     * Allows you to delete a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportProovCodeDeleteAsync($proov_code, $lang = null)
    {
        return $this->reportProovCodeDeleteAsyncWithHttpInfo($proov_code, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportProovCodeDeleteAsyncWithHttpInfo
     *
     * Allows you to delete a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportProovCodeDeleteAsyncWithHttpInfo($proov_code, $lang = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->reportProovCodeDeleteRequest($proov_code, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportProovCodeDelete'
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportProovCodeDeleteRequest($proov_code, $lang = null)
    {
        // verify the required parameter 'proov_code' is set
        if ($proov_code === null || (is_array($proov_code) && count($proov_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proov_code when calling reportProovCodeDelete'
            );
        }

        $resourcePath = '/report/{proov_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($proov_code !== null) {
            $resourcePath = str_replace(
                '{' . 'proov_code' . '}',
                ObjectSerializer::toPathValue($proov_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportProovCodeGet
     *
     * Allows you to retrieve a full report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Report
     */
    public function reportProovCodeGet($proov_code, $lang = null)
    {
        list($response) = $this->reportProovCodeGetWithHttpInfo($proov_code, $lang);
        return $response;
    }

    /**
     * Operation reportProovCodeGetWithHttpInfo
     *
     * Allows you to retrieve a full report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Report, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportProovCodeGetWithHttpInfo($proov_code, $lang = null)
    {
        $returnType = '\Swagger\Client\Model\Report';
        $request = $this->reportProovCodeGetRequest($proov_code, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Report',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportProovCodeGetAsync
     *
     * Allows you to retrieve a full report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportProovCodeGetAsync($proov_code, $lang = null)
    {
        return $this->reportProovCodeGetAsyncWithHttpInfo($proov_code, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportProovCodeGetAsyncWithHttpInfo
     *
     * Allows you to retrieve a full report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportProovCodeGetAsyncWithHttpInfo($proov_code, $lang = null)
    {
        $returnType = '\Swagger\Client\Model\Report';
        $request = $this->reportProovCodeGetRequest($proov_code, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportProovCodeGet'
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportProovCodeGetRequest($proov_code, $lang = null)
    {
        // verify the required parameter 'proov_code' is set
        if ($proov_code === null || (is_array($proov_code) && count($proov_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proov_code when calling reportProovCodeGet'
            );
        }

        $resourcePath = '/report/{proov_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($proov_code !== null) {
            $resourcePath = str_replace(
                '{' . 'proov_code' . '}',
                ObjectSerializer::toPathValue($proov_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportProovCodePost
     *
     * Allows you to update a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Update $body body (optional)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Template
     */
    public function reportProovCodePost($proov_code, $body = null, $lang = null)
    {
        list($response) = $this->reportProovCodePostWithHttpInfo($proov_code, $body, $lang);
        return $response;
    }

    /**
     * Operation reportProovCodePostWithHttpInfo
     *
     * Allows you to update a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Update $body (optional)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Template, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportProovCodePostWithHttpInfo($proov_code, $body = null, $lang = null)
    {
        $returnType = '\Swagger\Client\Model\Template';
        $request = $this->reportProovCodePostRequest($proov_code, $body, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Template',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportProovCodePostAsync
     *
     * Allows you to update a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Update $body (optional)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportProovCodePostAsync($proov_code, $body = null, $lang = null)
    {
        return $this->reportProovCodePostAsyncWithHttpInfo($proov_code, $body, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportProovCodePostAsyncWithHttpInfo
     *
     * Allows you to update a report
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Update $body (optional)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportProovCodePostAsyncWithHttpInfo($proov_code, $body = null, $lang = null)
    {
        $returnType = '\Swagger\Client\Model\Template';
        $request = $this->reportProovCodePostRequest($proov_code, $body, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportProovCodePost'
     *
     * @param  string $proov_code Report ProovCode or CustomRef prefix by underscore (&#x60;&#x60;&#x60;_&#x60;&#x60;&#x60;) (required)
     * @param  \Swagger\Client\Model\Update $body (optional)
     * @param  \Swagger\Client\Model\Local $lang Response language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportProovCodePostRequest($proov_code, $body = null, $lang = null)
    {
        // verify the required parameter 'proov_code' is set
        if ($proov_code === null || (is_array($proov_code) && count($proov_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proov_code when calling reportProovCodePost'
            );
        }

        $resourcePath = '/report/{proov_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($proov_code !== null) {
            $resourcePath = str_replace(
                '{' . 'proov_code' . '}',
                ObjectSerializer::toPathValue($proov_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
